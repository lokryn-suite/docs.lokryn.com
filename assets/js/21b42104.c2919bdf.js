"use strict";(self.webpackChunkdocs_lokryn_com=self.webpackChunkdocs_lokryn_com||[]).push([[197],{3894:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"pipe-audit/core/core-profiles","title":"Profiles","description":"Profiles define how Pipe Audit connects to different storage backends.","source":"@site/docs/pipe-audit/core/profiles.md","sourceDirName":"pipe-audit/core","slug":"/core/profiles","permalink":"/docs/core/profiles","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"core-profiles","title":"Profiles","sidebar_position":3,"slug":"/core/profiles"},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/docs/core/quickstart"},"next":{"title":"Contracts","permalink":"/docs/core/contracts"}}');var i=n(4848),o=n(8453);const t={id:"core-profiles",title:"Profiles",sidebar_position:3,slug:"/core/profiles"},c="Profiles",l={},d=[{value:"MinIO / S3-Compatible",id:"minio--s3-compatible",level:2},{value:"Azure Blob Storage",id:"azure-blob-storage",level:2},{value:"Google Cloud Storage",id:"google-cloud-storage",level:2},{value:"Best Practices",id:"best-practices",level:2}];function a(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"profiles",children:"Profiles"})}),"\n",(0,i.jsxs)(s.p,{children:["Profiles define how Pipe Audit connects to different storage backends.",(0,i.jsx)(s.br,{}),"\n","They are declared in ",(0,i.jsx)(s.code,{children:"profiles.toml"})," at the project root, and referenced by name in contracts."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"minio--s3-compatible",children:"MinIO / S3-Compatible"}),"\n",(0,i.jsxs)(s.p,{children:["[minio_raw]",(0,i.jsx)(s.br,{}),"\n",'provider   = "s3"',(0,i.jsx)(s.br,{}),"\n",'endpoint   = "',(0,i.jsx)(s.a,{href:"http://developyr.local:9000",children:"http://developyr.local:9000"}),'"',(0,i.jsx)(s.br,{}),"\n",'region     = "us-east-1"',(0,i.jsx)(s.br,{}),"\n",'access_key = "$ { MINIO_ACCESS_KEY }"',(0,i.jsx)(s.br,{}),"\n",'secret_key = "$ { MINIO_SECRET_KEY }"',(0,i.jsx)(s.br,{}),"\n","path_style = true",(0,i.jsx)(s.br,{}),"\n","use_ssl    = false"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Notes"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"endpoint"})," points to your MinIO or S3-compatible service."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"region"})," is required even for MinIO."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"access_key"})," and ",(0,i.jsx)(s.code,{children:"secret_key"})," are injected from environment variables."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"path_style = true"})," is recommended for MinIO/localstack."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"use_ssl"})," toggles HTTPS."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"azure-blob-storage",children:"Azure Blob Storage"}),"\n",(0,i.jsxs)(s.p,{children:["[azure_test]",(0,i.jsx)(s.br,{}),"\n",'provider = "azure"',(0,i.jsx)(s.br,{}),"\n",'connection_string = "$ { AZURE_STORAGE_CONNECTION_STRING }"']}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Notes"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"connection_string"})," is pulled from the environment."]}),"\n",(0,i.jsx)(s.li,{children:"This is the simplest way to authenticate against Azure Blob Storage. This is set to use the account key connection string."}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"google-cloud-storage",children:"Google Cloud Storage"}),"\n",(0,i.jsxs)(s.p,{children:["[gcs_test]",(0,i.jsx)(s.br,{}),"\n",'provider = "gcs"',(0,i.jsx)(s.br,{}),"\n",'service_account_json = "$ { GCP_SERVICE_ACCOUNT_KEY }"']}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Notes"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"service_account_json"})," should point to a service account key file, or inline JSON."]}),"\n",(0,i.jsxs)(s.li,{children:["Typically set in ",(0,i.jsx)(s.code,{children:".env"})," as a path, e.g. ",(0,i.jsx)(s.code,{children:"GCP_SERVICE_ACCOUNT_KEY=/path/to/key.json"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Always reference secrets with ",(0,i.jsx)(s.code,{children:"$ \\{VAR_NAME \\}"})," so they can be injected from ",(0,i.jsx)(s.code,{children:".env"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Use ",(0,i.jsx)(s.code,{children:"pipa profile list"})," to see available profiles."]}),"\n",(0,i.jsxs)(s.li,{children:["Use ",(0,i.jsx)(s.code,{children:"pipa profile test \\< PROFILE_NAME \\>"})," to verify connectivity."]}),"\n",(0,i.jsxs)(s.li,{children:["Contracts reference profiles by name, e.g. ",(0,i.jsx)(s.code,{children:'profile = "minio_raw"'}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);